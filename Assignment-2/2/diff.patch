diff -ru ./../../linux-5.19.8/arch/x86/entry/syscalls/syscall_64.tbl ./linux-5.19.8/arch/x86/entry/syscalls/syscall_64.tbl
--- ./../../linux-5.19.8/arch/x86/entry/syscalls/syscall_64.tbl	2022-09-08 14:54:08.000000000 +0530
+++ ./linux-5.19.8/arch/x86/entry/syscalls/syscall_64.tbl	2022-11-16 02:50:32.120064776 +0530
@@ -373,6 +373,8 @@
 449	common	futex_waitv		sys_futex_waitv
 450	common	set_mempolicy_home_node	sys_set_mempolicy_home_node

+469 common  kernel_2d_memcpy sys_kernel_2d_memcpy
+
 #
 # Due to a historical design error, certain syscalls are numbered differently
 # in x32 as compared to native x86_64.  These syscalls have numbers 512-547.
diff -ru ./../../linux-5.19.8/kernel/sys.c ./linux-5.19.8/kernel/sys.c
--- ./../../linux-5.19.8/kernel/sys.c	2022-09-08 14:54:08.000000000 +0530
+++ ./linux-5.19.8/kernel/sys.c	2022-11-16 19:55:44.810001703 +0530
@@ -342,6 +342,26 @@
 	return retval;
 }

+
+// MY SYSTEM CALL :)
+SYSCALL_DEFINE4(kernel_2d_memcpy, float **, source, float **, dest, int, row, int, col)
+{
+	while (row--)
+	{
+		float buffer[col];
+		if (__copy_from_user(&buffer, &source[row], col*sizeof(float)))
+		{
+			return -EFAULT;
+		}
+		if (__copy_to_user(&dest[row], &buffer, col*sizeof(float)))
+		{
+			return -EFAULT;
+		}
+	}
+	return 0;
+}
+

 /*
  * Unprivileged users may change the real gid to the effective gid
  * or vice versa.  (BSD-style)
